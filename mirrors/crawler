#!/usr/bin/python
import pkg_resources
pkg_resources.require("TurboGears")

from sqlobject import *
import sys, os, string
import turbogears
from mirrors.model import *
from urlparse import urlsplit
from optparse import OptionParser

from turbogears.database import PackageHub
hub = __connection__ = None

def per_host(host, include_private=False, config=None):
    if host.is_private() and not include_private:
        return

    program='./crawler_perhost'
    args = []
    args.append('-c "%s"' % config)
    args.append('--hostid="%s"' % host.id)
    if include_private:
        args.append('--include-private')

    b = ""
    for a in args:
        b += a
        b += " "

    b += "&"

        
    print "%s %s" % (program, b)
    #os.execvp(program, args)


def doit_fork(include_private=False, threads=10, config=None):
    hosts = list(Host.select())

    while len(hosts) > 0:
        pids = []
        for host in hosts[:min(len(hosts), threads)]:
            try:
                pid = os.fork()
            except OSError:
                sys.exit("Unable to create child process.")
                
            if pid == 0:
                # child
                per_host(host, include_private=include_private, config=config)
                # never returns

            else:
                pids.append(pid)
        while len(pids) > 0:
            donepid, exitstatus = os.wait()
            pids.remove(donepid)
        
        hosts = hosts[min(len(hosts), threads):]

def doit(include_private=False, threads=10, config=None):
    initial_hosts = Host.select()
    hosts = []
    for h in initial_hosts:
        if h.is_private() and not include_private: continue
        if not h.is_active(): continue
        hosts.append(h)
    

    while len(hosts) > 0:
        pids = []
        for host in hosts[:min(len(hosts), threads)]:
            per_host(host, include_private=include_private, config=config)
        print "wait"
        
        hosts = hosts[min(len(hosts), threads):]


def main():
    parser = OptionParser(usage=sys.argv[0] + " [options]")
    parser.add_option("-c", "--config",
                      dest="config", default='dev.cfg',
                      help="TurboGears config file to use")

    parser.add_option("--include-private",
                      action="store_true", dest="include_private", default=False,
                      help="Include hosts marked 'private' in the crawl")

    parser.add_option("-t", "--threads", type="int",
                      dest="threads", default=10,
                      help="max threads to start in parallel")

    (options, args) = parser.parse_args()

    turbogears.update_config(configfile=options.config,
                             modulename="mirrors.config")
    global hub
    global __connection__
    hub = PackageHub("mirrors")
    __connection__ = hub
    
    doit(include_private=options.include_private, threads=options.threads, config=options.config)



if __name__ == "__main__":
    sys.exit(main())
        
