#!/usr/bin/python
import pkg_resources
pkg_resources.require("TurboGears")

from sqlobject import *
from sqlobject.sqlbuilder import *
import sys, os
import turbogears
from mirrors.model import *
from optparse import OptionParser

from os.path import *
import sys

from turbogears.database import PackageHub
hub = None
__connection__ = None



def write_repo_files(directory='.'):

    try:
        os.makedirs(directory)
    except OSError:
        pass

    for r in Repository.select():
        seen_countries = urllist(r)

        # write the global list
        if r.prefix is not None and r.arch is not None:
            #if u'source' in r.prefix and r.arch.name == u'source':
            #continue
            fname = '%s/%s-global-%s.txt' % (directory, r.prefix, r.arch.name)
            f = open(fname, 'w')
            for country, urls in seen_countries.iteritems():
                for u in urls:
                    f.write("%s\n" % u)
            f.close()

        # write the per-country lists
        for country in seen_countries.keys():
            if country == '':
                continue

            if r.prefix is not None and r.arch is not None:
                #if u'source' in r.prefix and r.arch.name == u'source':
                #continue
                fname = '%s/%s-%s-%s.txt' % (directory, r.prefix, country.upper(), r.arch.name)
                f = open(fname, 'w')
                for u in seen_countries[country]:
                    f.write("%s\n" % u)
                f.close()

def main():
    parser = OptionParser(usage=sys.argv[0] + " [options]")
    parser.add_option("-c", "--config",
                      dest="config", default='dev.cfg',
                      help="TurboGears config file to use")

    parser.add_option("-d", "--directory",
                      dest='directory', default='.',
                      help="Output directory to use")

    (options, args) = parser.parse_args()

    turbogears.update_config(configfile=options.config,
                             modulename="mirrors.config")
    global hub
    global __connection__
    hub = PackageHub("mirrors")
    __connection__ = hub
    
    write_repo_files(options.directory)



if __name__ == "__main__":
    sys.exit(main())
