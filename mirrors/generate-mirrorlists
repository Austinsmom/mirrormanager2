#!/usr/bin/python
import pkg_resources
pkg_resources.require("TurboGears")

from sqlobject import *
from sqlobject.sqlbuilder import *
import sys, os
import turbogears
from mirrors.model import *
from mirrors.mirrorlist import global_mirrorlist, mirrorlist_byCountry, populate_all_caches
from optparse import OptionParser

from os.path import *
import sys

from turbogears.database import PackageHub
hub = None
__connection__ = None


def write_global_file(directory, prefix, archName, glist):
    fname = '%s/%s-global-%s.txt' % (directory, prefix, archName)
    f = open(fname, 'w')
    for u in glist:
        f.write("%s\n" % u[1])
    f.close()

def write_per_country_file(directory, prefix, country, archName, ulist):
    fname = '%s/%s-%s-%s.txt' % (directory, prefix, country.upper(), archName)
    f = open(fname, 'w')
    for u in ulist:
        f.write("%s\n" % u[1])
    f.close()
    

def write_repo_files(directory='.'):

    try:
        os.makedirs(directory)
    except OSError:
        pass

    for r in Repository.select():
        glist = global_mirrorlist(r)
        # write the global list
        if r.prefix is not None and r.arch is not None:
            if u'source' in r.prefix and r.arch.name == u'source':
                for a in primary_arches:
                    write_global_file(directory, r.prefix, a, glist)
            else:
                    write_global_file(directory, r.prefix, r.arch.name, glist)
            

        # write the per-country lists
        clist = mirrorlist_byCountry(r)
        for country in clist.keys():
            if country == '':
                continue
            ulist = clist[country]
            if r.prefix is not None and r.arch is not None:
                if u'source' in r.prefix and r.arch.name == u'source':
                    for a in primary_arches:
                        write_per_country_file(directory, r.prefix, country, a, ulist)
                else:
                    write_per_country_file(directory, r.prefix, country, r.arch.name, ulist)

def main():
    parser = OptionParser(usage=sys.argv[0] + " [options]")
    parser.add_option("-c", "--config",
                      dest="config", default='dev.cfg',
                      help="TurboGears config file to use")

    parser.add_option("-d", "--directory",
                      dest='directory', default='.',
                      help="Output directory to use")

    (options, args) = parser.parse_args()

    turbogears.update_config(configfile=options.config,
                             modulename="mirrors.config")
    global hub
    global __connection__
    hub = PackageHub("mirrors")
    __connection__ = hub
    
    populate_all_caches()
    write_repo_files(options.directory)



if __name__ == "__main__":
    sys.exit(main())
