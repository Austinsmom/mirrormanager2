#!/usr/bin/python

import os, sys
from os.path import join
import pickle
import bz2
import re
import ConfigParser
import pprint
import time

class HostConfig(object):
    """Holder for config info from the configuration file"""
    def __init__(self):
        self.config = { 'version' : 0,
                        'global': {},
                        'site': {},
                        'host': {},
                        }


def gen_dirtree(path):
    # structure here is:
    # dirtree is a list
    # [
    #   { 'dirpath' : dirpath,
    #     'files'   : {
    #                   filename1 : size1,
    #                   filename2 : size2,
    #                   ...
    #                 }
    #   }
    #   ...
    # ]
    # 

    dirtree = []
    for dirpath, dirnames, filenames in os.walk(path):
        result = {'dirpath': dirpath}

        # trim filenames list
        date_file_list = []
        count=0
        for name in filenames:
            f = os.path.join(dirpath, name)
            s = os.stat(f)
            lastmod_date = time.localtime(s.st_mtime)
            date_file_tuple = (lastmod_date, f, s.st_size)
            date_file_list.append(date_file_tuple)
            if name.endswith('.rpm') or name.endswith('.html'):
                count=count+1
            # we only want to remember the most recent 10 if they're
            # directories full of .rpm or .html (repoview) files
        if count > 10:
            date_file_list.sort()
            date_file_list.reverse()
            date_file_list = date_file_list[:10]
            
        statfiles = {}
        for mtime, name, size in date_file_list:
            statfiles[name] = size

        result['files'] = statfiles
        dirtree.append(result)

    return dirtree

def errorprint(error):
    print >> sys.stderr, error

class MissingOption(Exception):
    pass

def check_required_options(conf, section, required_options):
    for o in required_options:
        if not conf.has_option(section, o):
            errorprint('missing required option %s in config [%s]' % (o, section))
            raise MissingOption()
    return True

def parse_value(value):
    """Split multi-line values into a list"""
    if value.find('\n') > -1:
        return value.split()
    return value

def parse_section(conf, section, item, required_options, optional_options):
    if conf.has_option(section, 'enabled'):
        if conf.get(section, 'enabled') != '1':
            return False
    if not check_required_options(conf, section, required_options):
        return False
    item.config[section.lower()] = {}
    for o in required_options:
        item.config[section.lower()][o] = parse_value(conf.get(section, o))
    for o in optional_options:
        if conf.has_option(section, o):
            item.config[section.lower()][o] = parse_value(conf.get(section, o))
    return True

def parse_global(conf, section, item):
    required_options = [ 'enabled', 'server' ]
    if not parse_section(conf, section, item, required_options, []):
        return False
    return True

def parse_site(conf, section, item):
    required_options = [ 'name', 'password' ]
    optional_options = [ 'organization', 'orgurl', 'private' ]
    return parse_section(conf, section, item, required_options, optional_options)

def parse_host(conf, section, item):
    required_options = [ 'name' ]
    optional_options = [ 'country', 'countries_allowed', 'netblocks', 'private' ]
    return parse_section(conf, section, item, required_options, optional_options)

def parse_category(conf, section, item):
    required_options = [ 'enabled', 'path', 'urls' ]
    optional_options = [ 'upstream' ]
    if not parse_section(conf, section, item, required_options, optional_options):
        return False

    dirtree = gen_dirtree(conf.get(section, 'path'))
    item.config[section]['dirtree'] = dirtree

def config(cfg, item):
    broken = False
    conf = ConfigParser.ConfigParser()
    conf.read(cfg)

    try:
        for section, parsefunc in [ ('global', parse_global), ('site', parse_site), ('host', parse_host) ]:
            if conf.has_section(section):
                if not parsefunc(conf, section, item):
                    return False
            else:
                errorprint('Invalid configuration - missing section [%s]' % (section))
                sys.exit(1)

        for section in conf.sections():
            if section in [ 'global', 'site', 'host']:
                continue
            else:
                parse_category(conf, section, item)

    except MissingOption:
        errorprint('Invalid configuration - Exiting')
        sys.exit(1)

    return True

def usage():
    print 'Usage: report_mirror [options]'
    print '  options:'
    print '  -o outputfile'
    print '  -c configfile'
    sys.exit(1)

def print_iso_sizes(dirtree):
    for d in dirtree:
        dir = d['dirpath']
        files = d['files']
        for f in files.iterkeys():
            if re.compile("\.iso$").search(f, 1):
                print "%s %s" % (os.path.join(dir, f), files[f])




def main():
    from optparse import OptionParser
    parser = OptionParser(usage= sys.argv[0] + " [options] dir1 [dir2] ...")
    parser.add_option("-o", "--output",
                      dest="output",
                      default=None,
                      help="Output filename (required)")
    parser.add_option("-c", "--config",
                      dest="config",
                      default='/etc/report_mirror.conf',
                      help='Configuration filename (required)')
    parser.add_option("-d", "--debug",
                      action="store_true",
                      dest="debug",
                      default=False,
                      help='Enable debugging output')


    (options, args) = parser.parse_args()
    if options.output is None:
        usage()

    item = HostConfig()
    if not config(options.config, item):
        sys.exit(1)

    if options.debug:
        pp = pprint.PrettyPrinter(indent=4)
        pp.pprint(item.config)
        
    pbz = bz2.compress(pickle.dumps(item.config, -1))
    if options.output is not None:
        outfile = open(options.output, 'wb')
        outfile.write(pbz)
        outfile.close()

    


if __name__ == '__main__':
    main()
