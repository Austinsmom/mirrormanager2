#!/usr/bin/python

"""
This script changes the directory path from the development tree to the
released tree once the release has been published.

In principle it should be run about a week after the said release has been
published.

This implies that for a week, users will be actually hitting the development
tree (which is hardlinked to the release tree and thus will have the same
content)

TODO: test IRL
"""

import sys
import re
import os

sys.path.append('..')
import mirrormanager2.lib
from mirrormanager2.lib.model import RepositoryRedirect, Repository
from optparse import OptionParser


# moving from pub/fedora/linux/development/14/x86_64/os to
# pub/fedora/linux/releases/14/Everything/x86_64/os
# by now, UMDL would have created a new repository object at the target
# directory anyhow except it's version and arch values are wrong
# and we want to zero out the values in the current repository object

def fixup_repos(session, version, fromrepo, torepo):
    fromrepo_arch = fromrepo.arch
    fromrepo.arch = None
    session.add(fromrepo)

    torepo.prefix = fromrepo.prefix
    torepo.arch = fromrepo_arch
    torepo.version = version
    session.add(torepo)

    session.commit()


def move_devel_repo(session, category, version):
    try:
        c = mirrormanager2.lib.get_category_by_name(session, category)
    except SQLObjectNotFound:
        sys.stderr.write("Category '%s' not found, exiting" % category)
        print_categories(sys.stderr)
        sys.stderr.flush()
        sys.exit(1)

    try:
        v = mirrormanager2.lib.get_version_by_name_version(
            session, c.product.name, version)
    except:
        raise # fixme
    oldpattern = os.path.join('development', version)
    newpattern = os.path.join('releases', version, 'Everything')
    oldRe = re.compile(oldpattern)
    for r in c.repositories:
        d = r.directory
        if oldRe.search(d.name):
            t = d.name.replace(oldpattern, newpattern)
            try:
                new_d = Directory.byName(t)
            except:
                sys.stderr.write("target Directory(%s) not found, ignoring.\n" % t)
                sys.stderr.flush()
                continue

            l = len(new_d.repositories)
            if l == 0:
                continue # uh oh, umdl hasn't found this directory yet.  Pretty unlikely...
            if l > 1:
                raise ValueError # uh oh, how'd we wind up with 2 repos pointing at this directory?

            fixup_repos(v, r, new_d.repositories[0])
            print "%s => %s" % (d.name, t)


def move_install_repo(session, version):
    product=mirrormanager2.lib.get_product_by_name(session, "Fedora")
    ver = mirrormanager2.lib.get_version_by_name_version(
            session, product.name, version)

    for a in mirrormanager2.lib.get_arches(session):
        if a.name == u'source':
            continue

        repo = mirrormanager2.lib.get_repo_prefix_arch(
            session, prefix=u'fedora-install-%s' % ver.name, arch=a)
        if repo:
            print "destroying %s" % repo
            session.delete(repo)
            session.flush()
        else:
            print "Repo `%s` (%s-%s) not found -- skipping" % (
                repo, ver.name, a.name)
            continue

        if options.version == 'development':
            # yeah, development is ver.name, displayname is rawhide
            # We need a RepositoryRedirect here instead, as Repositories
            # already exist to these directories.
            fromRepo = u'fedora-install-rawhide'
            toRepo = u'rawhide'
            try:
                rr = RepositoryRedirect(fromRepo=fromRepo, toRepo=toRepo)
                session.add(rr)
                session.flush()
            except:
                print "Repository Redirect %s -> %s already exists, "\
                    "ignoring." % (fromRepo, toRepo)
                pass
        else:
            prefix=u'fedora-install-%s' % ver.name
            if a.primaryArch:
                d = u'pub/fedora/linux/releases/%s/Fedora/%s/os' % (
                    ver.name, a.name)
                category = mirrormanager2.lib.get_category_by_name(
                    session, 'Fedora Linux')
            else:
                d = u'pub/fedora-secondary/releases/%s/Fedora/%s/os' % (
                    ver.name, a.name)
                category = mirrormanager2.lib.get_category_by_name(
                    session, 'Fedora Secondary Arches')

            repos = mirrormanager2.lib.get_repo_by_dir(session, d)
            for r in repos:
                print "destroying %s" % r
                session.delete(r)
                session.flush()

            if not os.path.isdir(os.path.join('/', d)):
                print "directory %s does not exist on disk, skipping "\
                    "creation of a repository there" % d
                continue

            d = mirrormanager2.lib.get_directory_by_name(session, d)

            if not d:
                print "directory %s exists on disk, but not in the database"\
                    " yet, skipping creation of a repository there until "\
                    "after the next UMDL run."
                continue

            print "creating %s repo for arch %s" % (prefix, a.name)
            r = Repository(
                name=d.name,
                prefix=prefix,
                arch_id=a.id,
                directory_id=d.id,
                version_id=ver.id,
                category_id=category.id
            )
            session.add(r)
    session.commit()


def print_categories(session, fileno):
    fileno.write("Available categories:\n")
    for c in mirrormanager2.lib.get_categories(session):
        fileno.write("\t%s\n" % c.name)
        fileno.flush()


def main():
    global options
    parser = OptionParser(
        usage=sys.argv[0] + " [options]")
    parser.add_option(
        "-c", "--config",
        dest="config",
        default='/etc/mirrormanager/prod.cfg',
        help="Configuration file to use (default=/etc/mirrormanager/prod.cfg)")
    parser.add_option(
        "--version",
        dest="version",
        type="string",
        help="OS version to move (e.g. '14') [required]", default=None)
    parser.add_option(
        "--category",
        dest="category",
        type="string",
        help="Category (e.g. 'Fedora Linux') [required]", default=None)

    (options, args) = parser.parse_args()

    d = dict()
    with open(options.config) as config_file:
        exec(compile(config_file.read(), options.config, 'exec'), d)

    session = mirrormanager2.lib.create_session(d['DB_URL'])

    if options.version is None or options.category is None:
        parser.print_help()
        print_categories(session, sys.stdout)
        sys.exit(1)

    move_devel_repo(
        session,
        options.category,
        options.version)

    move_install_repo(
        session,
        options.version)

    return 0


if __name__ == "__main__":
    sys.exit(main())
