#!/usr/bin/python
__requires__ = 'TurboGears[future]'
import pkg_resources
pkg_resources.require("TurboGears")

from sqlobject import *
import turbogears
from mirrormanager.model import *
from optparse import OptionParser
import sys, re, os

from turbogears.database import PackageHub
hub = __connection__ = None

options = None

category = 'Fedora Linux'

# moving from pub/fedora/linux/development/14/x86_64/os to pub/fedora/linux/releases/14/Everything/x86_64/os


def doit():
    global options
    c = Category.byName(category)
    topdir = c.topdir.name
    oldpattern = os.path.join('development', options.version)
    newpattern = os.path.join('releases', options.version, 'Everything')
    oldRe = re.compile(oldpattern)
    for d in c.directories:
        if oldRe.search(d.name):
            r = d.repository
            if r is not None:
                t = d.name.replace(oldpattern, newpattern)
                #print "trying to find %s" % t
                try:
                    new_d = Directory.byName(t)
                    r.directory = new_d
                    r.category = c
                    r.sync()
                    print "%s => %s" % (d.name, t)
                except:
                    #print "Unable to find a directory in [%s] for %s" % (options.archiveCategory, d.name)
                    raise

def main():
    global options
    parser = OptionParser(usage=sys.argv[0] + " [options]")
    parser.add_option("-c", "--config",
                      dest="config", default='/etc/mirrormanager/prod.cfg',
                      help="TurboGears config file to use (default=/etc/mirrormanager/prod.cfg)")
    parser.add_option("--version",
                      dest="version", action="store", type="string", help="OS version to move (e.g. '14') [required]", default=None)

    (options, args) = parser.parse_args()
    if options.version is None:
        parser.print_help()
        sys.exit(1)

    turbogears.update_config(configfile=options.config,
                             modulename="mirrormanager.config")
    global hub
    global __connection__
    hub = PackageHub("mirrormanager")
    __connection__ = hub
    
    doit()
    return 0

if __name__ == "__main__":
    sys.exit(main())
        
