#!/usr/bin/python
__requires__ = 'TurboGears[future]'
import pkg_resources
pkg_resources.require("TurboGears")

from sqlobject import *
import turbogears
from mirrormanager.model import *
from optparse import OptionParser
import re
import sys
import os

from turbogears.database import PackageHub
hub = __connection__ = None

options = None

def doit():
    global options
    product=Product.byName(u"Fedora")
    ver = Version.selectBy(product=product, name=options.version)[0]

    for a in Arch.select():
        if a.name == u'source': continue
        repos = Repository.selectBy(prefix=u'fedora-install-%s' % ver.name arch=a)
        for r in repos:
            print "destroying %s" % r
            r.destroySelf()
        repos = Repository.selectBy(name=d)
        for r in repos:
            print "destroying %s" % r
            r.destroySelf()

        if a.primaryArch:
            d = u'pub/fedora/linux/releases/%s/Fedora/%s/os' % (ver.name, a.name)
            category = Category.byName(u'Fedora Linux')    
        else:
            d = u'pub/fedora-secondary/releases/%s/Fedora/%s/os' % (ver.name, a.name)
            category = Category.byName(u'Fedora Secondary Arches')    

        if not os.path.isdir(os.path.join('/', d)):
            print "directory %s does not exist, skipping creation of a repository there"
            continue

        d = Directory.byName(d)
        print "creating fedora-install-%s repo for arch %s" % (ver.name, a.name)
        r = Repository(name=d.name, prefix=u'fedora-install-%s' % ver.name, arch=a, directory=d, version=ver, category=category)


def main():
    global options
    parser = OptionParser(usage=sys.argv[0] + " [options]")
    parser.add_option("-c", "--config",
                      dest="config", default='/etc/mirrormanager/prod.cfg',
                      help="TurboGears config file to use (default=/etc/mirrormanager/prod.cfg)")
    parser.add_option("-v", "--version",
                      dest="version", default=None,
                      help="the Version to move")

    (options, args) = parser.parse_args()
    if options.version is None:
        print "Error: You must specify a version."
        return 1

    turbogears.update_config(configfile=options.config,
                             modulename="mirrormanager.config")
    global hub
    global __connection__
    hub = PackageHub("mirrormanager")
    __connection__ = hub
    
    doit()
    return 0

if __name__ == "__main__":
    sys.exit(main())
        
